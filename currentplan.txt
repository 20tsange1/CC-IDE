Change analysis -> Static Analysis + Dynamic Analysis
New page for static analysis.
Dynamic analysis to be run alongside parser.

-> We also don't want our analysis to be directly built into the parsing. We don't want conflicts, keep it separate, keep it isolated.
-> Analysis may tamper with the root tree, we don't want that.


Complete event simulation, make it a type of static anaylsis.

Add in the ability to remember which grammar is being used. Makes it easier to then also change how colours are saved, make it grammar specific.

Add in PDF view in visualiser. + Template with HTML, then filling in.

Write up first draft / outline for diss.

Comments on Comments:

-> How about. Adding node ID, which triggers a flag in the explore method.
-> Which can then be reset.

- Shift to here would be fine, definitely not important if it takes too long


- Need print view, currently implementing.
-> Add into visualisation tab, some type of PDF form?
-> I'm thinking of HTML template with some sort of rendering such that the contract goes directly in. 
-> But then you need to think about sub-titles and such.

-> Add in HTML template which you can pick, and then render the template with the contract inside.
-> Ignore subtitles for now.


#########
Folding Editor

- Folding editor may be way too granular, i.e. way too many nodes to be able to split it at node level. Maybe up to a certain depth?
-> idea would be to assign each node a unique ID. Then from that, you will have to relay that back to the parser and BUI.
-> Then from the BUI, you would be able to press the node and then only things from that node onwards will be shown. Backend means that you use that ID as a flag, if parent not ID or self not ID, then don't show. This gets kinda hard to manage but definitely doable?

Currently have a very rudimentary form, depends if you are following a dive deep or hide away principle. 


#########

Framework Based IDE
-> Plugins
-> Variety of Languages
-> Build and add on top

Plugin Based IDE
-> You choose the legal language being used.
-> You then choose from / contribute to a library of analyses + visualisations + more developed for that legal language.
-> Some may be general and suitable for all legal languages, some may only be for a certain grammar.

If you look at how VSC and other IDEs work, a similar idea is implemented. You download the coding languages and relevant plugins, allowing you to develop in that language more effectively and efficiently.

Also provides the opportunity for a community to form, as opposed to a siloed development group. So many languages exist, why keep it to yourself?

-> Speeding up the development process tenfold, providing the perfect tool for an iterative approach.

When developing a legal language, you have to ask yourself:
1. Is this language suit for it's purpose? Does it allow us to write contracts the way we want to?
2. Is this language complete? Does it cover what we want it to? Is it correctly written?
3. Can this language be evaluated?



########

Version Control

Actually quite simple in concept?
-> Use git, run automated workflows, checking for consistency, ensuring grammar is correct, ensuring alignment + no loss of information.
-> Keeps versions, name versions, provide comments, provide messages.
-> Change the wording, but you don't change the cooncept (from coders to lawyers)

-> You'd basically just need to package git into a new form. Automate pushes, commits, and so forth.
-> Hardest part is probably problems with merging and out-of-date versions that need reconconciliation. Maybe just force?


########

Event Simulation

Clauses and sub-clauses connected by C-AND

You can basically create depth by connecting different "contracts" and build up depth in conditions. 

-> [1] IF [2], [2] IF [3] OR [4], [3] IF [5] ...

-> Are we looking at evaluation of a contract, a clause or? 
-> What is our actual goal of the contract, what is our goal of the simulation?


########

Contract Metadata (Metadata in general)

Store information about the contract, language, date, time, so on.
Extend with languages too.


#######

Formatting

Right now I use direct formatting, adding HTML formatting and then adding the text, shouldn't I be making subsections in HTML with the class, and then adding formatting to the class?

Another super helpful thing is you now get a way to interact with the HTML and actually use it for finding out the node types.

In css, you can add before and after. This should be what you use.
And then additionally, you can add other things inside.

Swapped to CSS, instead of trying to do it in order, do it by styling. This is more correct in my opinion, nodes are their own type, you should be able to add styling to a node type. Idea is no loss of information too, when moving between styles.


# Hierarchical

# Tree view 1 tree view 2

Is it possible to make it generic? At all? How much would need to be specified.

Not everyone will have statements, conditions, no obvious solution.

Generic Simulator, how would we achieve, drawbacks.



###########
DSL and MPS

Why not? -> Explain


###########

Syntatic Sugar, what is actually necessary what isnt?

Talk about lexing, tokens


###########
Logical Ambiguity

Theres no brackets, so there is Ambiguity with the use of AND and OR. No precedence rule, and no way to work around it besides maybe order.

Also, what about the case where a statement or definition becomes a condition in a future clause. Nested conditions.


Furthermore, what about in the case of grammars where they do not cover both sides.


###########

There is a problem with moving the different views into files in app.py

This is due to the dependencies between the objects and functions, whereby the pages require the use of an object from app.py but cannot access it in the new file. When attempting to import it, it ends up becoming a circular import.


###########

Backwards compatability of grammars needs to be testable, done through "unit tests"

Testing of grammar and outputted AST (or in the case where structure is changed, parsability of contract under new grammar).




##########

Event has thing occuring on a day, thing occuring must have been expressed or checked against things in the contract.

Unexpected Events

If it becomes true, we can turn it into a true condition.

Condition -> Statement -> Condition -> Statement (Nested conditions)


Lawyers trying out permutations of grammar, permutations of language, necessary for changes.



Furthermore, what we could do is use something like an indicative / auxiliary node. Where you basically have a specific part of your BNF that is added to indicate that a certain sentence or set of child nodes will be part of a condition, statement, or definition. What this allows you to do is then use the tools that we have provided regarding event simulation, non-restrictive to a specific language, and be able to indicate which one of a language's non-terminals are condition, statements, or definitions.

Can be done two ways, either require the developer to add it into their own grammar in the BNF. OR, we provide some sort of notation like C:= or S:= or D:=, which then automatically replaces every instance of itself with <condition> where <condition> := YOUR_TYPE. This then means that we can use the existing event simulation tools. One problem that arises is the existence of IFs, THENs and ELSEs. We can provide the same structure and place it into the grammar, but the lawyers would have to know that it exists, because it may implicitly exist within the grammar (we added it, not them).



###########

Differences between contracts.


Parser Generator.
Recursive Descent LL(1)

Explain Tree-Sitter LR, LALR, GLR

https://github.com/eatkins/tree-sitter-ebnf-generator/tree/master


#Looking further into it, first, rewrite the parser to include everythign from tree-sitter. But we can leverage aliases - Basically imitate condition, statement, definition.

L - Left Precedence
R - Right Precedence
P - Precedence
PD - Precedence Dynamic
T - Token
TI - Token Immediate

#Have changed the parser, but need to fix brackets. Brackets should be either ignored or have something applied to it. can ignore for now, but it is lowkey a bigger issue.

Also remember to explain precedence number.

Write about the logical fallacies or inconsistencies. If Then, But not every case needs an else. Conflicting clauses?

#Idea for bracket is you set it as a expression itself, and then you just pop it off and add it to the next one. So you evaluate and then throw back into new expression.
^ Has been done

#Problem now is back to the autosuggestion. How do we do autosuggestion? 

Because now there may be optionals, there may be repeats, many things to consider.

Have fixed partially, but a new problem is that it just jumps past all the errors and matches the next valid one. So we end up signalling the wrong error.



Furthermore, in tree-sitter swap to treecursor, more efficient + use lookahead to discover possible next steps.


Write a grammar for discounts. Show versatility.


###########

To do indicative nodes / indirection nodes, we can either map it to a new node, use an alias, or replace the name.

But we have enabled it through reworking the parser. Additionally, now tree-sitter is utilised more effectively.


###########

Think of intellectual points, 3+.

Generalisation, how do we give meaning to BNFs, 

Test suite for grammars, make sure it works.

Then generate random events, make it not work.

Document with bullet points, how to approach, what functionality.







##############
Ontologies

<OBLIGATION> : Must, Have To, Need To, Should, Ought To
<PERMISSION> : Can, May, Could, Might
<PROHIBITION> : Must Not, Cannot, May Not, Should Not


Parser for Subject / Object ?

<VEHICLE> : Vehicle
    | <CAR>
    | <TRUCK>
    | <MOTORCYCLE>

<CAR> : Porsche, Toyota, Ferarri

Is A ^


Vehicle with a sunroof

What kinds of testcases, what kind of language should we consider
Additional information of ontology, check if it can be resolved.

Minimum Viable Product -> Next steps

Jupyter Notebook style or ontology view - isolate.

If several relationships, how can it be extensible? 
If relationships used in simulation, what do they mean? Maybe relationship is known to grammar.
"Common Knowledge" vs Defined Knowledge
In simulation, Is A relationship is easier to evaluate.
If developer can add relationship into BNF + list of relationships available for ontology.
Lawyer can extend ontology? 
Match it verbatim - will have to be word for word?

Simulator does test for Is A relationship, Relationship defined for Has A relationship