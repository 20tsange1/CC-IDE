# Generated from grammarParser.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,81,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,
        1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,4,10,59,
        8,10,11,10,12,10,60,1,11,4,11,64,8,11,11,11,12,11,65,1,12,1,12,5,
        12,70,8,12,10,12,12,12,73,9,12,1,13,4,13,76,8,13,11,13,12,13,77,
        1,13,1,13,0,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,1,0,5,1,0,48,57,6,0,9,10,32,32,34,34,58,60,
        62,63,124,124,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        3,0,9,10,12,13,32,32,84,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,1,29,1,0,0,0,3,33,1,0,0,0,5,38,1,0,0,0,7,43,1,0,0,0,9,45,
        1,0,0,0,11,47,1,0,0,0,13,49,1,0,0,0,15,51,1,0,0,0,17,53,1,0,0,0,
        19,55,1,0,0,0,21,58,1,0,0,0,23,63,1,0,0,0,25,67,1,0,0,0,27,75,1,
        0,0,0,29,30,5,58,0,0,30,31,5,58,0,0,31,32,5,61,0,0,32,2,1,0,0,0,
        33,34,5,76,0,0,34,35,5,58,0,0,35,36,5,58,0,0,36,37,5,61,0,0,37,4,
        1,0,0,0,38,39,5,82,0,0,39,40,5,58,0,0,40,41,5,58,0,0,41,42,5,61,
        0,0,42,6,1,0,0,0,43,44,5,124,0,0,44,8,1,0,0,0,45,46,5,60,0,0,46,
        10,1,0,0,0,47,48,5,62,0,0,48,12,1,0,0,0,49,50,5,34,0,0,50,14,1,0,
        0,0,51,52,5,63,0,0,52,16,1,0,0,0,53,54,5,43,0,0,54,18,1,0,0,0,55,
        56,5,42,0,0,56,20,1,0,0,0,57,59,7,0,0,0,58,57,1,0,0,0,59,60,1,0,
        0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,22,1,0,0,0,62,64,8,1,0,0,63,62,
        1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,0,0,0,66,24,1,0,0,0,
        67,71,7,2,0,0,68,70,7,3,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,1,
        0,0,0,71,72,1,0,0,0,72,26,1,0,0,0,73,71,1,0,0,0,74,76,7,4,0,0,75,
        74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,79,1,0,0,
        0,79,80,6,13,0,0,80,28,1,0,0,0,5,0,60,65,71,77,1,6,0,0
    ]

class grammarParserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    OTTER = 1
    LOTTER = 2
    ROTTER = 3
    SPLITTER = 4
    CHEVRON = 5
    ICHEVRON = 6
    QUOTE = 7
    QUESTION = 8
    PLUS = 9
    STAR = 10
    INT = 11
    WORD = 12
    ID = 13
    WS = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'::='", "'L::='", "'R::='", "'|'", "'<'", "'>'", "'\"'", "'?'", 
            "'+'", "'*'" ]

    symbolicNames = [ "<INVALID>",
            "OTTER", "LOTTER", "ROTTER", "SPLITTER", "CHEVRON", "ICHEVRON", 
            "QUOTE", "QUESTION", "PLUS", "STAR", "INT", "WORD", "ID", "WS" ]

    ruleNames = [ "OTTER", "LOTTER", "ROTTER", "SPLITTER", "CHEVRON", "ICHEVRON", 
                  "QUOTE", "QUESTION", "PLUS", "STAR", "INT", "WORD", "ID", 
                  "WS" ]

    grammarFileName = "grammarParser.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


